package kz.amihady.eccomerce.redis;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.Set;
import java.util.UUID;

@Service
@Slf4j
@RequiredArgsConstructor
public class FailedDeletesCacheService {

    private final RedisTemplate<String, String> redisTemplate;
    private static final String CACHE_KEY = "failed_deletes";


    // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UUID –≤ Redis (–º–Ω–æ–∂–µ—Å—Ç–≤–æ Set)
    public void addUUID(UUID uuid) {
        redisTemplate.opsForSet().add(CACHE_KEY, uuid.toString());
        log.info("–î–æ–±–∞–≤–ª–µ–Ω UUID –≤ –∫—ç—à: " + uuid);
    }

    // ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ UUID –∏–∑ Redis
    public void removeUUID(UUID uuid) {
        redisTemplate.opsForSet().remove(CACHE_KEY, uuid.toString());
        log.info("–£–¥–∞–ª–µ–Ω UUID –∏–∑ –∫—ç—à–∞: " + uuid);
    }

    // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö UUID –∏–∑ Redis
    public Set<String> getAllUUIDs() {
        Set<String> uuids = redisTemplate.opsForSet().members(CACHE_KEY);
        log.info("–í—Å–µ UUID –≤ –∫—ç—à–µ: " + uuids);
        return uuids;
    }
}